
apiVersion: v1
kind: Service
metadata:
  name: etcd-cluster
  namespace: third-party
spec:
  ports:
  - port: 12379
    name: client
  - port: 12380
    name: peer
  clusterIP: None
  selector:
    etcd: etcd-cluster

---

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: "etcd-pdb"
  namespace: third-party
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      etcd: etcd-cluster
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: etcd-node
  namespace: third-party
  labels:
    etcd: etcd-cluster
spec:
  replicas: 3
  selector:
    matchLabels:
      etcd: etcd-cluster
  template:
    metadata:
      name: etcd-node
      creationTimestamp: null
      labels:
        etcd: etcd-cluster
        third-party: etcd-cluster
    spec:
      volumes:
        - name: etcddata
          persistentVolumeClaim:
            claimName: etcddata
        #- hostPath:
        #    path: /data/k8s/etcd
        #    type: DirectoryOrCreate
        #  name: etcddata
      containers:
        - name: etcd-node
          image: 'registry.cn-beijing.aliyuncs.com/onpremise/etcd:v3.4.7'
          command:
            - /bin/sh
            - '-cx'
            - >
              IP=$(hostname -i)

              PEERS=""

              ENDPOINTS=""

              for i in $(seq 0 $((${CLUSTER_SIZE} - 1))); do
                  PEERS="${PEERS}${PEERS:+,}etcd-node-${i}=http://etcd-node-${i}.etcd-cluster.${NAMESPACE}.svc.cluster.local.:12380"
                  ENDPOINTS="${ENDPOINTS}${ENDPOINTS:+,}http://etcd-node-${i}.etcd-cluster.${NAMESPACE}.svc.cluster.local.:12379"
              done

              export INITIAL_CLUSTER="${PEERS}"

              export NAME="${HOSTNAME}"

              export DATA_DIR="/etcddata/${HOSTNAME}"

              export INITIAL_CLUSTER_TOKEN="etcd-cluste"

              export LISTEN_PEER_URLS="http://${IP}:12380"

              export
              LISTEN_CLIENT_URLS="http://${IP}:12379,http://127.0.0.1:2379"

              export
              ADVERTISE_CLIENT_URLS="http://${HOSTNAME}.etcd-cluster.${NAMESPACE}.svc.cluster.local.:12379"

              export
              INITIAL_ADVERTISE_PEER_URLS="http://${HOSTNAME}.etcd-cluster.${NAMESPACE}.svc.cluster.local.:12380"

              if [ -d "${DATA_DIR}/member" ];then
                export INITIAL_CLUSTER_STATE="existing"
              else
                mkdir -p ${DATA_DIR}
                etcdctl --endpoints=${ENDPOINTS} member list 2>&1| grep ${NAME}
                if [ $? -eq 0 ];then
                  myeid=`etcdctl --endpoints=${ENDPOINTS} member list 2>&1| grep ${NAME} | awk -F ',' '{print $1}'`
                  etcdctl --endpoints=${ENDPOINTS} member remove ${myeid}
                  etcdctl --endpoints=${ENDPOINTS} member add ${NAME} --peer-urls="${INITIAL_ADVERTISE_PEER_URLS}"
                  export INITIAL_CLUSTER_STATE="existing"
                else
                  etcdctl --endpoints=${ENDPOINTS} member add ${NAME} --peer-urls="${INITIAL_ADVERTISE_PEER_URLS}" | grep ETCD >/tmp/etcd.env
                  if [ $? -eq 0 ];then
                    export INITIAL_CLUSTER_STATE=`grep INITIAL_CLUSTER_STATE /tmp/etcd.env`
                  else
                    export INITIAL_CLUSTER_STATE="new"
                  fi
                fi
              fi

              exec /usr/bin/etcd \
                --name ${HOSTNAME} \
                --data-dir ${DATA_DIR} \
                --initial-cluster-token ${INITIAL_CLUSTER_TOKEN} \
                --listen-peer-urls ${LISTEN_PEER_URLS} \
                --listen-client-urls ${LISTEN_CLIENT_URLS} \
                --advertise-client-urls ${ADVERTISE_CLIENT_URLS} \
                --initial-advertise-peer-urls ${INITIAL_ADVERTISE_PEER_URLS} \
                --initial-cluster ${INITIAL_CLUSTER} \
                --initial-cluster-state ${INITIAL_CLUSTER_STATE}
          env:
            - name: CLUSTER_SIZE
              value: '3'
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          resources:
            limits:
              cpu: '2'
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 200Mi
          volumeMounts:
            - name: etcddata
              mountPath: /etcddata
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tzwken/etcd
                    operator: In
                    values:
                      - etcd
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: third-party
                    operator: In
                    values:
                      - etcd-cluster
              topologyKey: kubernetes.io/hostname
      schedulerName: default-scheduler
      tolerations:
        - operator: Exists
          effect: NoSchedule
  serviceName: etcd-cluster
  podManagementPolicy: Parallel
  updateStrategy:
    type: OnDelete
  revisionHistoryLimit: 10